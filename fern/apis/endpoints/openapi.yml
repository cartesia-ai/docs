openapi: 3.0.0

info:
  title: Cartesia REST API
  version: "2024-06-10"

servers:
  - url: "https://api.cartesia.ai"

security:
  - APIKeyHeader: []

paths:
  "/tts/bytes":
    post:
      summary: Stream Speech (Bytes)
      description: |-
        Generate audio from a transcript using a given voice and model. The audio is streamed out as raw bytes.
      parameters:
        - $ref: "#/components/parameters/Cartesia-Version"
      requestBody:
        $ref: "#/components/requestBodies/TTSBytesRequest"
      responses:
        "200":
          description: A stream of audio data.
          content:
            application/octet-stream:
              schema:
                type: string
                format: binary
                description: Binary audio data. The underlying bytes will be in the requested output format.
        default:
          $ref: "#/components/responses/Error"
  "/tts/sse":
    post:
      summary: Stream Speech (Server-Sent Events)
      description: |-
        Generate audio from a transcript using a given voice and model. The audio is streamed out as Server-Sent Events.
      x-fern-streaming: true
      parameters:
        - $ref: "#/components/parameters/Cartesia-Version"
      requestBody:
        $ref: "#/components/requestBodies/TTSRequest"
      responses:
        "200":
          description: A stream of audio data.
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: "#/components/schemas/JSONChunkResponse"
                  - $ref: "#/components/schemas/JSONDoneResponse"
                  - $ref: "#/components/schemas/JSONTimestampResponse"
                  - $ref: "#/components/schemas/JSONErrorResponse"
                discriminator:
                  propertyName: status_code
        default:
          $ref: "#/components/responses/Error"
  "/voice-conversion/sse":
    post:
      summary: Voice Conversion (Server-Sent Events)
      description: |-
        Converts an audio clip to a new voice. The audio is streamed out as Server-Sent Events.
        To specify the target voice, exactly one of `voice_id` or `voice_embedding` must be given.
      x-fern-streaming: true
      parameters:
        - $ref: "#/components/parameters/Cartesia-Version"
      requestBody:
        content:
          multipart/form-data:
            schema:
              type: object
              required:
                - clip
                - model_id
                - output_format[sample_rate]
                # We should require one of voice_id and voice_embedding. This will be easier with OpenAPI 4: https://github.com/OAI/sig-moonwalk/discussions/100
              properties:
                clip:
                  type: string
                  format: binary
                  description: The audio clip to convert to a new voice. Must be at most 4 MB in size.
                context_id:
                  type: string
                  description: A unique identifier for the requests belonging to this context. Context id must consist of only alphanumeric characters, hyphens, and underscores.
                  example: "happy-monkeys-fly"
                model_id:
                  title: Model ID
                  type: string
                  description: The ID of the model to use for the conversion. For voice conversion, this must be `voice-conversion`.
                  example: voice-conversion
                output_format[sample_rate]:
                  title: Sample Rate
                  type: integer
                  description: The sample rate of the output.
                  example: 44100
                output_format[encoding]:
                  title: Encoding
                  description: The encoding of the output. This is optional, and defaults to `pcm_f32le` unless specified.
                  type: string
                  enum: ["pcm_s16le", "pcm_f32le", "pcm_mulaw", "pcm_alaw"]
                voice_id:
                  type: string
                  description: The ID of the voice to convert to. 
                  example: a0e99841-438c-4a64-b679-ae501e7d6091
                voice_embedding:
                  type: string
                  description: |- 
                    A string containing an array of numbers representing the voice embedding. The array must be exactly 192 numbers long.
                    
                    Warning: Unlike other endpoints, for voice conversion you must pass in voice embeddings as a _string_, not an array object.
      responses:
        "200":
          description: A stream of audio data.
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: "#/components/schemas/JSONChunkResponse"
                  - $ref: "#/components/schemas/JSONDoneResponse"
                  - $ref: "#/components/schemas/JSONErrorResponse"
                discriminator:
                  propertyName: status_code
        default:
          $ref: "#/components/responses/Error"



  "/voices":
    get:
      summary: List Voices
      description: |-
        List all voices available to the user, that is, public voices and the user's own voices.
      parameters:
        - $ref: "#/components/parameters/Cartesia-Version"
      responses:
        "200":
          description: List of voices.
          content:
            application/json:
              schema:
                title: Voice List
                type: array
                items:
                  $ref: "#/components/schemas/Voice"
    post:
      summary: Create Voice
      description: |-
        Create a new voice with a given name, description, and embedding.
      parameters:
        - $ref: "#/components/parameters/Cartesia-Version"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - name
                - description
                - embedding
              properties:
                name:
                  "$ref": "#/components/schemas/VoiceName"
                description:
                  "$ref": "#/components/schemas/VoiceDescription"
                embedding:
                  "$ref": "#/components/schemas/VoiceEmbedding"
      responses:
        "201":
          description: The created voice.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Voice"
        default:
          $ref: "#/components/responses/Error"

  "/voices/{id}":
    get:
      summary: Get Voice
      parameters:
        - $ref: "#/components/parameters/Cartesia-Version"
        - in: path
          name: id
          required: true
          schema:
            "$ref": "#/components/schemas/VoiceId"
      responses:
        "200":
          description: The voice.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Voice"
        default:
          $ref: "#/components/responses/Error"
    delete:
      summary: Delete Voice
      parameters:
        - $ref: "#/components/parameters/Cartesia-Version"
        - in: path
          name: id
          required: true
          schema:
            "$ref": "#/components/schemas/VoiceId"
      responses:
        "204":
          description: Voice deleted.
        default:
          $ref: "#/components/responses/Error"
    patch:
      summary: Update Voice
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  "$ref": "#/components/schemas/VoiceName"
                description:
                  "$ref": "#/components/schemas/VoiceDescription"
      parameters:
        - $ref: "#/components/parameters/Cartesia-Version"
        - in: path
          name: id
          required: true
          schema:
            "$ref": "#/components/schemas/VoiceId"
      responses:
        "200":
          description: The updated voice.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Voice"
        default:
          $ref: "#/components/responses/Error"

  "/voices/clone/clip":
    post:
      summary: Clone Voice (Clip)
      description: |-
        Clones a voice from an audio clip uploaded as a file. The clip is uploaded using multipart/form-data with a `clip` field containing the audio file.
      operationId: clone_voice_from_clip
      parameters:
        - $ref: "#/components/parameters/Cartesia-Version"
      requestBody:
        content:
          multipart/form-data:
            schema:
              type: object
              required:
                - clip
              properties:
                clip:
                  type: string
                  format: binary
                enhance:
                  type: boolean
                  description: Whether to enhance the audio before cloning the voice. Defaults to true.
              
      responses:
        "200":
          $ref: "#/components/responses/VoiceEmbeddingResponse"
        default:
          $ref: "#/components/responses/Error"

  "/voices/mix":
    post: 
      summary: Mix Voices
      description: |-
        Mixes voices together to create a new voice. The voices are specified by their IDs or embeddings, and are accompanied by weights to describe how much to mix.
      parameters:
        - $ref: "#/components/parameters/Cartesia-Version"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - voices
              properties:
                voices:
                  type: array
                  items:
                    type: object
                    oneOf:
                      - $ref: "#/components/schemas/VoicesId"
                      - $ref: "#/components/schemas/VoicesEmbedded"
                    example:
                      voices:
                        - id: "a0e99841-438c-4a64-b679-ae501e7d6091"
                          weight: 0.7
                        - embedding: [...]
                          weight: 0.3
      responses:
        "200":
          $ref: "#/components/responses/VoiceEmbeddingResponse"
        default:
          $ref: "#/components/responses/Error"

  "/voices/localize":
    post:
      summary: Localize Voice
      description: |-
        Takes a voice embedding, and target language, and localizes the voice to the specific language. For certain languages, this improves the quality of the accent. 
        
        Pricing: This endpoint costs 225 characters of utilization per call.
      parameters:
        - $ref: "#/components/parameters/Cartesia-Version"
      requestBody:
        $ref: "#/components/requestBodies/VoiceLocalizationRequest"
      responses:
        "200":
          $ref: "#/components/responses/VoiceEmbeddingResponse"
        default:
          $ref: "#/components/responses/Error"

  "/":
    get:
      security: []
      summary: API Status and Version
      description: Returns the server's version and a status message which can be useful for sanity checking.
      responses:
        "200":
          description: Everything OK.
          content:
            application/json:
              schema:
                type: object
                properties:
                  version:
                    type: string
                    title: version
                  status:
                    type: boolean
                    title: ok
        default:
          $ref: "#/components/responses/Error"

components:
  securitySchemes:
    APIKeyHeader:
      type: apiKey
      in: header
      name: X-API-Key

  parameters:
    Cartesia-Version:
      in: header
      name: Cartesia-Version
      description: The version of the Cartesia API to use.
      required: true
      schema:
        type: string
      example: "2024-06-10"

  requestBodies:
    TTSRequest:
      required: true
      content:
        application/json:
          schema:
            title: TTS Request
            type: object
            required:
              - model_id
              - transcript
              - voice
              - output_format
            properties:
              model_id:
                title: Model ID
                type: string
                example: sonic-english
              transcript:
                title: Transcript
                type: string
                description: A transcript for the generation. Should not be empty and should not be only puncutation.
                example: "Hello, world! I'm generating audio on Cartesia."
              duration:
                title: Duration
                description: The maximum duration of the audio in seconds.
                type: integer
              voice:
                title: Voice
                description: The voice to use for the speech. Can be either an ID or an embedding, specified by the `mode` field.
                oneOf:
                  - type: object
                    title: Voice ID
                    properties:
                      mode:
                        type: string
                        enum: [id]
                      id:
                        "$ref": "#/components/schemas/VoiceId"
                      __experimental_controls:
                        type: object
                        properties:
                          speed:
                            title: Speed
                            description: Controls the speed of the voice.
                            oneOf:
                              - type: string
                                enum: [slowest, slow, normal, fast, fastest]
                              - type: number
                                minimum: -1.0
                                maximum: 1.0
                          emotion:
                            title: Emotion
                            description: Controls the amount of emotion to add to the voice. Accepts an array of `emotion:level` tags.
                            type: array
                            items:
                              type: string
                              pattern: "^(anger|positivity|surprise|sadness|curiosity):(lowest|low|high|highest)$"
                    example:
                      mode: "id"
                      id: &voiceID "a0e99841-438c-4a64-b679-ae501e7d6091"
                      __experimental_controls:
                        {
                          speed: "normal",
                          emotion: ["positivity:high", "curiosity"],
                        }
                  - type: object
                    title: Voice Embedding
                    properties:
                      mode:
                        type: string
                        enum: [embedding]
                      embedding:
                        "$ref": "#/components/schemas/VoiceEmbedding"
                      __experimental_controls:
                        type: object
                        properties:
                          speed:
                            title: Speed
                            description: Controls the speed of the voice.
                            oneOf:
                              - type: string
                                enum: [slowest, slow, normal, fast, fastest]
                              - type: number
                                minimum: -1.0
                                maximum: 1.0
                          emotion:
                            title: Emotion
                            description: Controls the amount of emotion to add to the voice. Accepts an array of `emotion:level` tags.
                            type: array
                            items:
                              type: string
                              pattern: "^(anger|positivity|surprise|sadness|curiosity):(lowest|low|high|highest)$"
                    example:
                      mode: "embedding"
                      embedding:
                        &voiceEmbedding [
                          -0.033633083,
                          0.072083704,
                          -0.01807767,
                          -0.083488315,
                          -0.04407617,
                          0.0022592682,
                          0.070505895,
                          0.023946615,
                          -0.04788024,
                          -0.06388413,
                          -0.0716355,
                          -0.0022612812,
                          -0.0053448505,
                          -0.07848381,
                          0.0348162,
                          -0.053745482,
                          -0.092399485,
                          -0.02950225,
                          0.028591828,
                          -0.10556894,
                          0.023313355,
                          0.06224387,
                          0.0362463,
                          0.029258432,
                          0.10769641,
                          0.043595582,
                          -0.058543224,
                          -0.080402784,
                          -0.0953816,
                          -0.008988032,
                          -0.0028981369,
                          -0.004752721,
                          -0.20742874,
                          0.058907595,
                          0.08813939,
                          -0.06192675,
                          0.099082634,
                          -0.09661578,
                          -0.0077761724,
                          -0.013982456,
                          -0.025798267,
                          0.04467142,
                          0.026222011,
                          0.023023574,
                          0.011227064,
                          -0.17462021,
                          -0.09880612,
                          -0.1521035,
                          -0.060464993,
                          -0.04735665,
                          -0.09725187,
                          -0.006127679,
                          0.15818526,
                          -0.039493002,
                          -0.067719474,
                          0.0066190436,
                          -0.10636633,
                          0.17073768,
                          -0.051717706,
                          0.03186961,
                          -0.020547207,
                          -0.02244247,
                          0.013196935,
                          -0.06431055,
                          -0.115360335,
                          0.016918058,
                          -0.033195216,
                          0.11255181,
                          0.020366343,
                          -0.041032124,
                          0.08780918,
                          -0.040567942,
                          0.057276532,
                          0.05848221,
                          -0.077479474,
                          -0.073524915,
                          -0.01913317,
                          -0.029291833,
                          0.11210393,
                          -0.09859328,
                          0.2152541,
                          -0.022976823,
                          0.028627992,
                          -0.039598297,
                          0.041829932,
                          -0.05593181,
                          -0.06444655,
                          -0.018057477,
                          -0.008098263,
                          0.05994528,
                          0.10430693,
                          -0.13121894,
                          -0.06512868,
                          -0.026126215,
                          0.046727825,
                          -0.17180993,
                          -0.10577226,
                          -0.08610466,
                          0.008862588,
                          0.09547498,
                          -0.010965332,
                          -0.061217085,
                          -0.038954042,
                          0.019930292,
                          -0.017192135,
                          0.007296275,
                          0.03273872,
                          0.04389937,
                          -0.056483064,
                          0.003420891,
                          -0.10319067,
                          -0.015706042,
                          0.1308774,
                          -0.0018035866,
                          -0.03582506,
                          0.077131025,
                          0.013398928,
                          0.003188886,
                          0.12039741,
                          -0.033974767,
                          0.06899378,
                          -0.059775922,
                          -0.026934423,
                          0.028482193,
                          0.100996524,
                          0.004498743,
                          -0.02291186,
                          0.078752205,
                          -0.0063796206,
                          0.04206536,
                          0.05721349,
                          0.06290694,
                          0.06130212,
                          0.096969016,
                          -0.057664312,
                          -0.16727506,
                          -0.035220966,
                          0.090760484,
                          0.010039947,
                          0.06513242,
                          0.011055657,
                          -0.004258431,
                          -0.08316792,
                          -0.15650468,
                          -0.076931365,
                          0.11385587,
                          -0.038372636,
                          0.015648656,
                          -0.12029895,
                          -0.06604956,
                          0.009441591,
                          -0.11912808,
                          0.013378132,
                          0.029525978,
                          -0.0056742397,
                          -0.0075976513,
                          0.019999338,
                          -0.05521377,
                          -0.07650746,
                          -0.017710293,
                          -0.033986397,
                          -0.047768556,
                          0.13857274,
                          0.099290825,
                          0.11736938,
                          0.017834296,
                          -0.07140237,
                          -0.052047748,
                          -0.06398965,
                          -0.037033975,
                          -0.061061256,
                          -0.03330076,
                          -0.024472248,
                          -0.059656,
                          0.05359946,
                          -0.043915518,
                          -0.086325996,
                          0.14189173,
                          0.021086395,
                          0.02945159,
                          0.1029604,
                          0.018490415,
                          -0.028736332,
                          -0.025272416,
                          -0.06082937,
                          -0.031339463,
                          -0.0007249595,
                          0.025595888,
                          0.007144545,
                          -0.16938712,
                          -0.1160664,
                          -0.0654145,
                        ]
                      __experimental_controls:
                        {
                          speed: "normal",
                          emotion: ["positivity:high", "curiosity"],
                        }
                discriminator:
                  propertyName: mode
              output_format:
                title: Output Format
                description: The format of the audio data in the response.
                discriminator:
                  propertyName: container
                oneOf:
                  - type: object
                    required: [container, encoding, sample_rate]
                    properties:
                      container:
                        type: string
                        enum: ["raw"]
                      encoding:
                        type: string
                        enum:
                          ["pcm_s16le", "pcm_f32le", "pcm_mulaw", "pcm_alaw"]
                      sample_rate:
                        type: integer
                        enum: [8000, 16000, 22050, 24000, 44100, 48000]
              language:
                "$ref": "#/components/schemas/TTSLanguage"
              add_timestamps:
                title: Add Timestamps
                type: boolean
                description: Whether to add timestamps to the audio. This is only supported on `tts/sse` and WebSocket endpoints.
                example: false
    TTSBytesRequest:
      required: true
      content:
        application/json:
          schema:
            title: TTS Request
            type: object
            required:
              - model_id
              - transcript
              - voice
              - output_format
            properties:
              model_id:
                title: Model ID
                type: string
                example: sonic-english
              transcript:
                title: Transcript
                type: string
                description: A transcript for the generation. Should not be empty and should not be only puncutation.
                example: "Hello, world! I'm generating audio on Cartesia."
              duration:
                title: Duration
                description: The maximum duration of the audio in seconds.
                type: integer
              voice:
                title: Voice
                description: The voice to use for the speech. Can be either an ID or an embedding, specified by the `mode` field.
                oneOf:
                  - type: object
                    title: Voice ID
                    properties:
                      mode:
                        type: string
                        enum: [id]
                      id:
                        "$ref": "#/components/schemas/VoiceId"
                      __experimental_controls:
                        type: object
                        properties:
                          speed:
                            title: Speed
                            description: Controls the speed of the voice.
                            oneOf:
                              - type: string
                                enum: [slowest, slow, normal, fast, fastest]
                              - type: number
                                minimum: -1.0
                                maximum: 1.0
                          emotion:
                            title: Emotion
                            description: Controls the amount of emotion to add to the voice. Accepts an array of `emotion:level` tags.
                            type: array
                            items:
                              type: string
                              pattern: "^(anger|positivity|surprise|sadness|curiosity):(lowest|low|high|highest)$"
                    example:
                      mode: "id"
                      id: &voiceID "a0e99841-438c-4a64-b679-ae501e7d6091"
                      __experimental_controls:
                        {
                          speed: "normal",
                          emotion: ["positivity:high", "curiosity"],
                        }
                  - type: object
                    title: Voice Embedding
                    properties:
                      mode:
                        type: string
                        enum: [embedding]
                      embedding:
                        "$ref": "#/components/schemas/VoiceEmbedding"
                      __experimental_controls:
                        type: object
                        properties:
                          speed:
                            title: Speed
                            description: Controls the speed of the voice.
                            oneOf:
                              - type: string
                                enum: [slowest, slow, normal, fast, fastest]
                              - type: number
                                minimum: -1.0
                                maximum: 1.0
                          emotion:
                            title: Emotion
                            description: Controls the amount of emotion to add to the voice. Accepts an array of `emotion:level` tags.
                            type: array
                            items:
                              type: string
                              pattern: "^(anger|positivity|surprise|sadness|curiosity):(lowest|low|high|highest)$"
                    example:
                      mode: "embedding"
                      embedding:
                        &voiceEmbedding [
                          -0.033633083,
                          0.072083704,
                          -0.01807767,
                          -0.083488315,
                          -0.04407617,
                          0.0022592682,
                          0.070505895,
                          0.023946615,
                          -0.04788024,
                          -0.06388413,
                          -0.0716355,
                          -0.0022612812,
                          -0.0053448505,
                          -0.07848381,
                          0.0348162,
                          -0.053745482,
                          -0.092399485,
                          -0.02950225,
                          0.028591828,
                          -0.10556894,
                          0.023313355,
                          0.06224387,
                          0.0362463,
                          0.029258432,
                          0.10769641,
                          0.043595582,
                          -0.058543224,
                          -0.080402784,
                          -0.0953816,
                          -0.008988032,
                          -0.0028981369,
                          -0.004752721,
                          -0.20742874,
                          0.058907595,
                          0.08813939,
                          -0.06192675,
                          0.099082634,
                          -0.09661578,
                          -0.0077761724,
                          -0.013982456,
                          -0.025798267,
                          0.04467142,
                          0.026222011,
                          0.023023574,
                          0.011227064,
                          -0.17462021,
                          -0.09880612,
                          -0.1521035,
                          -0.060464993,
                          -0.04735665,
                          -0.09725187,
                          -0.006127679,
                          0.15818526,
                          -0.039493002,
                          -0.067719474,
                          0.0066190436,
                          -0.10636633,
                          0.17073768,
                          -0.051717706,
                          0.03186961,
                          -0.020547207,
                          -0.02244247,
                          0.013196935,
                          -0.06431055,
                          -0.115360335,
                          0.016918058,
                          -0.033195216,
                          0.11255181,
                          0.020366343,
                          -0.041032124,
                          0.08780918,
                          -0.040567942,
                          0.057276532,
                          0.05848221,
                          -0.077479474,
                          -0.073524915,
                          -0.01913317,
                          -0.029291833,
                          0.11210393,
                          -0.09859328,
                          0.2152541,
                          -0.022976823,
                          0.028627992,
                          -0.039598297,
                          0.041829932,
                          -0.05593181,
                          -0.06444655,
                          -0.018057477,
                          -0.008098263,
                          0.05994528,
                          0.10430693,
                          -0.13121894,
                          -0.06512868,
                          -0.026126215,
                          0.046727825,
                          -0.17180993,
                          -0.10577226,
                          -0.08610466,
                          0.008862588,
                          0.09547498,
                          -0.010965332,
                          -0.061217085,
                          -0.038954042,
                          0.019930292,
                          -0.017192135,
                          0.007296275,
                          0.03273872,
                          0.04389937,
                          -0.056483064,
                          0.003420891,
                          -0.10319067,
                          -0.015706042,
                          0.1308774,
                          -0.0018035866,
                          -0.03582506,
                          0.077131025,
                          0.013398928,
                          0.003188886,
                          0.12039741,
                          -0.033974767,
                          0.06899378,
                          -0.059775922,
                          -0.026934423,
                          0.028482193,
                          0.100996524,
                          0.004498743,
                          -0.02291186,
                          0.078752205,
                          -0.0063796206,
                          0.04206536,
                          0.05721349,
                          0.06290694,
                          0.06130212,
                          0.096969016,
                          -0.057664312,
                          -0.16727506,
                          -0.035220966,
                          0.090760484,
                          0.010039947,
                          0.06513242,
                          0.011055657,
                          -0.004258431,
                          -0.08316792,
                          -0.15650468,
                          -0.076931365,
                          0.11385587,
                          -0.038372636,
                          0.015648656,
                          -0.12029895,
                          -0.06604956,
                          0.009441591,
                          -0.11912808,
                          0.013378132,
                          0.029525978,
                          -0.0056742397,
                          -0.0075976513,
                          0.019999338,
                          -0.05521377,
                          -0.07650746,
                          -0.017710293,
                          -0.033986397,
                          -0.047768556,
                          0.13857274,
                          0.099290825,
                          0.11736938,
                          0.017834296,
                          -0.07140237,
                          -0.052047748,
                          -0.06398965,
                          -0.037033975,
                          -0.061061256,
                          -0.03330076,
                          -0.024472248,
                          -0.059656,
                          0.05359946,
                          -0.043915518,
                          -0.086325996,
                          0.14189173,
                          0.021086395,
                          0.02945159,
                          0.1029604,
                          0.018490415,
                          -0.028736332,
                          -0.025272416,
                          -0.06082937,
                          -0.031339463,
                          -0.0007249595,
                          0.025595888,
                          0.007144545,
                          -0.16938712,
                          -0.1160664,
                          -0.0654145,
                        ]
                      __experimental_controls:
                        {
                          speed: "normal",
                          emotion: ["positivity:high", "curiosity"],
                        }
                discriminator:
                  propertyName: mode
              output_format:
                title: Output Format
                description: The format of the audio data in the response. WAV and MP3 are only supported on the `/tts/bytes` endpoint.
                discriminator:
                  propertyName: container
                oneOf:
                  - type: object
                    required: [container, encoding, sample_rate]
                    properties:
                      container:
                        type: string
                        enum: ["raw", "wav", "mp3"]
                      encoding:
                        type: string
                        description: The encoding must be set to `mp3` when using the `mp3` container.
                        enum:
                          ["pcm_s16le", "pcm_f32le", "pcm_mulaw", "pcm_alaw", "mp3"]
                      sample_rate:
                        type: integer
                        enum: [8000, 16000, 22050, 24000, 44100, 48000]
              language:
                "$ref": "#/components/schemas/TTSLanguage"
    VoiceLocalizationRequest:
      required: true 
      content:
        application/json:
          schema:
            title: Voice Localization Request
            type: object
            required: 
              - embedding
              - language
              - original_speaker_gender
            properties:
              embedding:
                "$ref": "#/components/schemas/VoiceEmbedding"
              language:
                title: Language
                description: "Target language, which the output embedding will be localized to. Options: `en` (English), `de` (German), `es` (Spanish), `fr` (French), `ja` (Japanese), `pt` (Portuguese), `zh` (Chinese)."
                type: string
                enum: ["en", "de", "es", "fr", "ja", "pt", "zh"]
              dialect:
                title: Dialect (optional)
                description: "Target accent/dialect, which the output embedding will be localized to. Currently only supported for language `en`. Options: `au` (Australian), `in` (Indian), `so` (Southern [American]), `uk` (British), `us` (American)."
                type: string
                enum: ["au", "in", "so", "uk", "us"]
              original_speaker_gender:
                title: Original Speaker Gender
                description: Speaker gender of the original speaker, used to accurately localize voice. 
                type: string
                enum: [male, female]


  responses:
    Error:
      description: An error response.
      content:
        text/plain:
          schema:
            title: Error Description
            type: string
            example: error in voice

    VoiceEmbeddingResponse:
      description: The voice embedding.
      content:
        application/json:
          schema:
            title: Voice Embedding
            properties:
              embedding:
                "$ref": "#/components/schemas/VoiceEmbedding"
            type: object
            required:
              - embedding

  schemas:
    Timestamp:
      title: Timestamp
      type: string

    Voice:
      type: object
      required:
        - id
        - user_id
        - is_public
        - name
        - description
        - created_at
        - embedding
      properties:
        id:
          "$ref": "#/components/schemas/VoiceId"
        user_id:
          type: string
        is_public:
          type: boolean
        name:
          "$ref": "#/components/schemas/VoiceName"
        description:
          "$ref": "#/components/schemas/VoiceDescription"
        created_at:
          "$ref": "#/components/schemas/Timestamp"
        embedding:
          "$ref": "#/components/schemas/VoiceEmbedding"

    VoiceDescription:
      title: Voice Description
      type: string
      example: "A deep, rich, male voice with an Indian accent."

    VoiceId:
      title: Voice ID
      type: string
      example: *voiceID

    VoiceEmbedding:
      title: Voice Embedding
      items:
        type: number
      type: array
      example: *voiceEmbedding

    VoiceName:
      title: VoiceName
      type: string
      example: "Barbershop Man"

    Clip:
      title: Clip
      type: string
      format: binary

    TTSLanguage:
      title: Language
      description: "Language of the generation. Options are: `en` (English), `de` (German), `es` (Spanish), `fr` (French), `ja` (Japanese), `pt` (Portuguese), `zh` (Chinese), `hi` (Hindi), `it` (Italian), `ko` (Korean), `nl` (Dutch), `pl` (Polish), `ru` (Russian), `sv` (Swedish), `tr` (Turkish)."
      type: string
      enum: ["en", "de", "es", "fr", "ja", "pt", "zh", "hi", "it", "ko", "nl", "pl", "ru", "sv", "tr"]

    JSONBaseResponse:
      title: JSON Base Response
      type: object
      properties:
        status_code: &statusCode
          title: Status Code
          type: integer
          description: HTTP status code to allow for error handling. This is for errors encountered while streaming the response.
        done: &done
          title: Done
          type: boolean
          description: Whether the model has finished generating audio.
        type:
          title: Type
          type: string
          description: The type of response.

    JSONChunkResponse:
      title: JSON Chunk Response
      type: object
      allOf:
        - "$ref": "#/components/schemas/JSONBaseResponse"
        - type: object
          properties:
            status_code:
              <<: *statusCode
              enum: [206]
            done:
              <<: *done
              enum: [false]
            type:
              title: Type
              enum: [chunk]
            data:
              title: Data
              type: string
              format: byte
              description: Binary audio data encoded as base64. The underlying bytes will be in the requested output format.
            step_time:
              title: Step Time
              type: integer
              description: The time in milliseconds that the model took to generate this chunk of audio.

    JSONTimestampResponse:
      title: JSON Timestamp Response
      type: object
      allOf:
        - "$ref": "#/components/schemas/JSONBaseResponse"
        - type: object
          properties:
            status_code:
              <<: *statusCode
              enum: [206]
            done:
              <<: *done
              enum: [false]
            type:
              title: Type
              enum: [timestamps]
            word_timestamps:
              title: Word Timestamps
              type: object
              description: Object containing the timestamps for each word in the transcript.
              properties:
                words:
                  title: Words
                  type: array
                  items:
                    type: string
                  description: The individual words in the transcript.
                start:
                  title: Start
                  type: array
                  items:
                    type: number
                    format: float
                  description: The starting timestamp for each word (in seconds).
                end:
                  title: End
                  type: array
                  items:
                    type: number
                    format: float
                  description: The ending timestamp for each word (in seconds).

    JSONDoneResponse:
      title: JSON Done Response
      type: object
      allOf:
        - "$ref": "#/components/schemas/JSONBaseResponse"
        - type: object
          properties:
            status_code:
              <<: *statusCode
              enum: [200]
            done:
              <<: *done
              enum: [true]
            type:
              title: Type
              enum: [done]

    JSONErrorResponse:
      title: JSON Error Response
      type: object
      allOf:
        - "$ref": "#/components/schemas/JSONBaseResponse"
        - type: object
          properties:
            status_code:
              <<: *statusCode
              minimum: 400
              maximum: 599
            done:
              <<: *done
              enum: [true]
            type:
              title: Type
              enum: [error]
            error:
              title: Error
              type: string
              description: A human-readable error message.
    
    VoicesId: 
      title: Voice ID
      type: object
      required: ["id", "weight"]
      properties: 
        weight:
          type: number
          description: The weight of the voice in the mix. Must be a float in the range [0.0 and 1.0].
          example: 0.5
        id:
          "$ref": "#/components/schemas/VoiceId"
      
    VoicesEmbedded:
      title: Voice Embedding
      type: object
      required: ["embedding", "weight"]
      properties:
        weight:
          type: number
          description: The weight of the voice in the mix. Must be a float in the range [0.0 and 1.0].
          example: 0.5
        embedding:
          "$ref": "#/components/schemas/VoiceEmbedding"
                        

imports:
  voices: ./voices.yml

types:
  TextChunk:
    properties:
      text:
        type: string
        docs: |
          The text content of the chunk.
      start_timestamp:
        type: double
        docs: |
          The starting timestamp of the text chunk in seconds relative to the start of the call.

  TelephonyParams:
    docs: |
      The telephony parameters associated with the call when the call is made via a phone. More details can also be returned depending on the provider.
    properties:
      to:
        type: string
        docs: |
          The phone number of the caller.
      from:
        type: string
        docs: |
          The phone number of the agent.

  LogEvent:
    properties:
      event:
        type: string
        docs: |
          The event name.
      metadata:
        type: map<string, string>
        docs: |
          Additional metadata associated with the event.
      timestamp:
        type: double
        docs: |
          The timestamp when the event was received relative to the start of the call.

  LogMetric:
    properties:
      name:
        type: string
        docs: |
          The name of the metric.
      value:
        type: double
        docs: |
          The value of the metric.
      timestamp:
        type: double
        docs: |
          The timestamp when the metric was received relative to the start of the call.

  ToolCall:
    properties:
      id:
        type: string
        docs: |
          The unique identifier for the tool call.
      name:
        type: string
        docs: |
          The name of the tool that was called.
      arguments:
        type: map<string, string>
        docs: |
          The arguments passed to the tool.

  AgentCallStatus:
    enum:
      - active
      - completed
      - failed
      - cancelled
    docs: |
      The status of an agent call.

  AgentMetricResultStatus:
    enum:
      - completed
      - failed
    docs: |
      The status of an agent metric result. `failed` indicates that the metric result was not computed or parsed properly.

  GetCallsResponse:
    properties:
      data:
        type: list<AgentCall>
        docs: |
          The list of agent calls.
      next_page:
        type: optional<string>
        docs: |
          The cursor for the next page of results.

  PhoneNumberSummary:
    properties:
      id:
        type: string
        docs: |
          The ID of the phone number.
      number:
        type: string
        docs: |
          The phone number with country code included.

  AgentSummary:
    docs: |
      A summary of essential information about an agent.
    properties:
      id:
        type: string
        docs: |
          The ID of the agent.
      name:
        type: string
        docs: |
          The unique name of the agent, which can be used to identify the agent in the CLI.
      description:
        type: optional<string>
        docs: |
          A brief description of the agent.
      created_at:
        type: datetime
        docs: |
          The date and time when the agent was created.
      updated_at:
        type: datetime
        docs: |
          The date and time when the agent was last updated.
      tts_voice:
        type: voices.VoiceId
        docs: |
          The text-to-speech voice used by the agent.
      tts_language:
        type: string
        docs: |
          The language used for text-to-speech by the agent.
      webhook_id:
        type: optional<string>
        docs: |
          The identifier for the webhook associated with the agent. Add or customize a webhook to your agent to receive events when calls are made to your agent via the Playground.
      deleted_at:
        type: optional<datetime>
        docs: |
          The date and time when the agent was deleted, if applicable.
      git_repository_name:
        type: optional<string>
        docs: |
          The name of the Git repository associated with the agent.
      git_repository_id:
        type: optional<string>
        docs: |
          The identifier of the Git repository associated with the agent. This is Cartesia's internal identifier for the Git repository, not the repository ID on Github.
      git_deploy_branch:
        type: optional<string>
        docs: |
          The branch of the Git repository used for deployment.
      phone_numbers:
        type: optional<list<PhoneNumberSummary>>
        docs: |
          The phone numbers associated with the agent. Currently, you can only have one phone number per agent.
      has_text_to_agent_run:
        type: boolean
        docs: |
          Whether the agent has a text-to-agent run.
      deployment_count:
        type: integer
        docs: |
          The number of deployments associated with the agent.

  AgentTemplate:
    properties:
      id:
        type: string
        docs: |
          The ID of the agent template.
      name:
        type: string
        docs: |
          The name of the agent template.
      description:
        type: optional<string>
        docs: |
          The description of the agent template.
      repo_url:
        type: string
        docs: |
          The URL of the Git repository associated with the agent template.
      root_dir:
        type: string
        docs: |
          The root directory of the agent template.
      required_env_vars:
        type: optional<list<string>>
        docs: |
          The required environment variables for the agent template.
      dependencies:
        type: optional<list<string>>
        docs: |
          The dependencies of the agent template.
      owner_id:
        type: string
        docs: |
          The ID of the owner of the agent template.
      created_at:
        type: datetime
        docs: |
          The UTC timestamp when the agent template was created.
      updated_at:
        type: datetime
        docs: |
          The UTC timestamp when the agent template was last updated.

  AgentTranscript:
    properties:
      role:
        type: string
        docs: |
          The role of the participant in the conversation. Roles are `user`, `assistant`, or `system`. `assistant` is the agent. `system` is used to indicate logs during the conversation such as `log_event` or `log_metric`.
      text:
        type: optional<string>
        docs: |
          The text content of the transcript. This is the text that was spoken by the user or the agent.
      text_chunks:
        type: optional<list<TextChunk>>
        docs: |
          The chunks of text at a more granular level in the transcript with timestamps relative to the start of the call.
      start_timestamp:
        type: float
        docs: |
          The start timestamp in seconds relative to the start of the call.
      end_timestamp:
        type: float
        docs: |
          The end timestamp in seconds relative to the start of the call.
      end_reason:
        type: optional<string>
        docs: |
          The reason for why the assistant turn ended. This could be `call_ended`, `interrupted`, or `tts_completed`.
      tool_calls:
        type: optional<list<ToolCall>>
        docs: |
          The tool calls made during the turn.
      vad_buffer_ms:
        type: optional<integer>
        docs: |
          The VAD buffer time in milliseconds.
      tts_ttfb:
        type: optional<float>
        docs: |
          The time to first byte in seconds from the agent for text-to-speech.
      log_event:
        type: optional<LogEvent>
        docs: |
          The log event from user code.
      log_metric:
        type: optional<LogMetric>
        docs: |
          The log metric from user code.

  AgentCall:
    properties:
      id:
        type: string
        docs: |
          The unique identifier for the agent call.
      agent_id:
        type: string
        docs: |
          The identifier of the agent associated with the call.
      start_time:
        type: optional<datetime>
        docs: |
          The start time of the agent call.
      end_time:
        type: optional<datetime>
        docs: |
          The end time of the agent call.
      transcript:
        type: optional<list<AgentTranscript>>
        docs: |
          The transcript of the agent call.
      telephony_params:
        type: optional<TelephonyParams>
        docs: |
          The telephony parameters associated with the call when the call is made via phone.
      summary:
        type: optional<string>
        docs: |
          A summary of the agent call. This is a brief summary of the call that is generated by Cartesia.
      status:
        type: AgentCallStatus
        docs: |
          The status of the agent call.
      error_message:
        type: optional<string>
        docs: |
          The error message, if any, associated with the call.
      deployment_id:
        type: optional<string>
        docs: |
          The deployment identifier associated with the call.

  Metric:
    properties:
      id:
        type: string
        docs: |
          The unique identifier for the metric.
      name:
        type: string
        docs: |
          The name of the metric. This is a unique name that you can use to identify the metric in the CLI.
      display_name:
        type: optional<string>
        docs: |
          The display name of the metric, if available. This is the name that is displayed in the Playground.
      prompt:
        type: string
        docs: |
          The prompt associated with the metric, detailing the task and evaluation criteria.
      created_at:
        type: datetime
        docs: |
          The timestamp when the metric was created.

  CreateMetricRequest:
    properties:
      name:
        type: string
        docs: |
          The name of the metric. This must be a unique name that only allows lower case letters, numbers, and the characters _, -, and .
      display_name:
        type: optional<string>
        docs: |
          The display name of the metric.
      prompt:
        type: string
        docs: |
          The prompt associated with the metric, detailing the task and evaluation criteria.

  ListMetricsResponse:
    properties:
      data:
        type: list<Metric>
        docs: |
          List of metrics.
      has_more:
        type: boolean
        docs: |
          Whether there are more metrics to fetch (using `starting_after=id`, where id is the ID of the last Metric in the current response).
      next_page:
        type: optional<string>
        docs: |
          The ID of the last Metric in the current response as a cursor for the next page of results.

  MetricResult:
    properties:
      id:
        type: string
        docs: |
          The unique identifier for the metric result.
      metricId:
        type: string
        docs: |
          The identifier of the metric being measured.
      metricName:
        type: string
        docs: |
          The name of the metric being measured.
      summary:
        type: string
        docs: |
          A summary of the transcript of the call.
      transcript:
        type: optional<list<AgentTranscript>>
        docs: |
          The transcript of the call.
      agentId:
        type: string
        docs: |
          The identifier of the agent associated with the metric result.
      callId:
        type: string
        docs: |
          The identifier of the call associated with the metric result.
      deploymentId:
        type: string
        docs: |
          The identifier of the deployment associated with the metric result.
      result:
        type: string
        docs: |
          The raw result of the metric in a string format.
      jsonResult:
        type: optional<map<string, unknown>>
        docs: |
          The structured JSON result of the metric.
      value:
        type: optional<unknown>
        docs: |
          The value of the metric result.
      status:
        type: AgentMetricResultStatus
        docs: |
          The status of the metric result.
      runId:
        type: optional<string>
        docs: |
          The identifier of the run associated with the metric result, if applicable.
      createdAt:
        type: datetime
        docs: |
          The UTC timestamp when the metric result was created.

  ListMetricResultsResponse:
    properties:
      data:
        type: list<MetricResult>
        docs: |
          List of metric results.
      has_more:
        type: boolean
        docs: |
          Whether there are more metric results to fetch (using `starting_after=id`, where id is the ID of the last MetricResult in the current response).
      next_page:
        type: optional<string>
        docs: |
          The cursor for the next page of results.

  PhoneNumber:
    docs: |
      A phone number that can be used to make calls to your agent.
    properties:
      agent_id:
        type: string
        docs: |
          The ID of the agent.
      number:
        type: string
        docs: |
          The phone number.
      created_at:
        type: datetime
        docs: |
          The UTC timestamp when the phone number was created.
      updated_at:
        type: datetime
        docs: |
          The UTC timestamp when the phone number was last updated.
      is_cartesia_managed:
        type: boolean
        docs: |
          Whether the phone number is managed by Cartesia. As of now, this is always true since Cartesia provisions phone numbers for you.

  GetTemplatesResponse:
    properties:
      templates:
        type: list<AgentTemplate>
        docs: |
          List of agent templates.

  GetAgentsResponse:
    properties:
      summaries:
        type: list<AgentSummary>
        docs: |
          The summaries of the agents.

  UpdateAgentRequest:
    properties:
      name:
        type: optional<string>
        docs: |
          The name of the agent.
      description:
        type: optional<string>
        docs: |
          The description of the agent.
      tts_voice:
        type: optional<voices.VoiceId>
        docs: |
          The voice to use for text-to-speech.
      tts_language:
        type: optional<string>
        docs: |
          The language to use for text-to-speech.

  Deployment:
    properties:
      id:
        type: string
        docs: |
          The unique identifier for the deployment.
      agent_id:
        type: string
        docs: |
          The ID of the agent associated with this deployment.
      status:
        type: string
        docs: |
          The current status of the deployment. It can be `queued`, `inactive`, `deploy_error`, `skipped`, `build_error`, `building`, or `deployed`.
      is_pinned:
        type: boolean
        docs: |
          Marks that this deployment is the active deployment for its associated `agent_id`. Only one deployment per agent can be pinned at a time. Deployments can be pinned even if they are not live or failed.
      is_live:
        type: boolean
        docs: |
          True if this deployment is the live production deployment for its associated `agent_id`. Only one deployment per agent can be live at a time.
      env_var_collection_id:
        type: string
        docs: |
          The ID of the environment variable collection associated with this deployment.
      source_code_file_id:
        type: string
        docs: |
          The ID of the source code file associated with this deployment.
      git_repository_id:
        type: string
        docs: |
          The ID of the Git repository associated with this deployment. This is an internal Cartesia ID and does not reference the actual repository on Github.
      git_commit_hash:
        type: string
        docs: |
          The commit hash of the Git repository for this deployment.
      created_at:
        type: datetime
        docs: |
          The UTC timestamp when the deployment was created.
      updated_at:
        type: datetime
        docs: |
          The UTC timestamp when the deployment was last updated.
      build_completed_at:
        type: datetime
        docs: |
          The UTC timestamp when the build was completed.
      build_error:
        type: optional<string>
        docs: |
          Any error that occurred during the build process.
      build_logs:
        type: string
        docs: |
          Logs generated during the build process of the deployment.
      build_started_at:
        type: datetime
        docs: |
          The UTC timestamp when the build process started.
      deployment_started_at:
        type: datetime
        docs: |
          The UTC timestamp when the deployment process started.
      deployment_completed_at:
        type: datetime
        docs: |
          The UTC timestamp when the deployment process was completed.
      deployment_error:
        type: optional<string>
        docs: |
          Any error that occurred during the deployment process.

service:
  base-path: /agents
  auth: true
  endpoints:
    list:
      path: /
      method: GET
      display-name: List Agents
      docs: |
        Lists all agents associated with your account.
      response: GetAgentsResponse
      examples:
        - name: List Agents
          response:
            body:
              summaries:
                - id: "agent_123"
                  name: "cartesia-basic-chat"
                  description: "A basic chat agent"
                  created_at: "2025-08-13T12:00:00Z"
                  updated_at: "2025-08-13T12:00:00Z"
                  tts_voice: "bf0a246a-8642-498a-9950-80c35e9276b5"
                  tts_language: "en"
                  has_text_to_agent_run: false
                  deployment_count: 1
                  git_repository_name: "cartesia-basic-chat"
                  git_repository_id: "123456"
                  git_deploy_branch: "main"
                  phone_numbers: [{ id: "123456", number: "+11234567890" }]
                - id: "agent_456"
                  name: "cartesia-outbound-calls"
                  description: "An agent that makes outbound calls"
                  created_at: "2025-08-13T12:00:00Z"
                  updated_at: "2025-08-13T12:00:00Z"
                  tts_voice: "78ab82d5-25be-4f7d-82b3-7ad64e5b85b2"
                  tts_language: "en"
                  has_text_to_agent_run: false
                  deployment_count: 1
                  git_repository_name: "cartesia-outbound-calls"
                  git_repository_id: "789012"
                  git_deploy_branch: "main"
                  phone_numbers: [{ id: "789012", number: "+11234567890" }]

    get:
      path: /{agent_id}
      method: GET
      docs: |
        Returns the details of a specific agent. To create an agent, use the CLI or the Playground for the best experience and integration with Github.
      display-name: Get Agent
      path-parameters:
        agent_id:
          type: string
          docs: |
            The ID of the agent.
      response: AgentSummary
      examples:
        - name: Get Agent
          path-parameters:
            agent_id: "agent_123"
          response:
            body:
              id: "agent_123"
              name: "cartesia-basic-chat"
              created_at: "2025-08-13T12:00:00Z"
              updated_at: "2025-08-13T12:00:00Z"
              tts_voice: "bf0a246a-8642-498a-9950-80c35e9276b5"
              tts_language: "en"
              has_text_to_agent_run: false
              deployment_count: 1
              git_repository_name: "cartesia-basic-chat"
              git_repository_id: "123456"
              git_deploy_branch: "main"
              phone_numbers: [{ id: "123456", number: "+11234567890" }]

    update:
      path: /{agent_id}
      method: PATCH
      display-name: Update Agent
      path-parameters:
        agent_id:
          type: string
          docs: |
            The ID of the agent.
      request: UpdateAgentRequest
      response: AgentSummary
      examples:
        - name: Update Agent
          path-parameters:
            agent_id: "agent_123"
          request:
            tts_voice: "bf0a246a-8642-498a-9950-80c35e9276b5"
            tts_language: "en"
          response:
            body:
              id: "agent_123"
              name: "cartesia-basic-chat-updated"
              created_at: "2025-08-13T12:00:00Z"
              updated_at: "2025-08-13T12:00:00Z"
              tts_voice: "bf0a246a-8642-498a-9950-80c35e9276b5"
              tts_language: "en"
              has_text_to_agent_run: false
              deployment_count: 1
              phone_numbers: [{ id: "123456", number: "+11234567890" }]

    delete:
      path: /{agent_id}
      method: DELETE
      display-name: Delete Agent
      path-parameters:
        agent_id:
          type: string
          docs: |
            The ID of the agent.

    templates:
      path: /templates
      method: GET
      auth: false
      display-name: List Templates
      docs: |
        List of public, Cartesia-provided agent templates to help you get started.
      response: GetTemplatesResponse
      examples:
        - name: List Templates
          response:
            body:
              templates:
                - id: "cartesia-basic-chat"
                  name: "Cartesia Basic Chat"
                  description: "A basic chat agent"
                  owner_id: "cartesia-ai"
                  repo_url: "https://github.com/cartesia-ai/straw"
                  root_dir: ""
                  created_at: "2025-07-25T06:50:12.889Z"
                  updated_at: "2025-07-25T06:50:12.889Z"
                  required_env_vars: null
                  dependencies: null

    list-calls:
      path: /calls
      method: GET
      display-name: List Calls
      docs: |
        Lists calls sorted by start time in descending order for a specific agent. `agent_id` is required and if you want to include `transcript` in the response, add `expand=transcript` to the request. This endpoint is paginated.
      request:
        name: ListCallsRequest
        query-parameters:
          agent_id:
            type: string
            docs: |
              The ID of the agent.
          expand:
            type: optional<string>
            docs: |
              The fields to expand in the response. Currently, the only supported value is `transcript`.
          starting_after:
            type: optional<string>
            docs: |
              (Pagination option)The ID of the call to start after.
          ending_before:
            type: optional<string>
            docs: |
              (Pagination option) The ID of the call to end before.
          limit:
            type: optional<integer>
            default: 10
            docs: |
              (Pagination option) The number of calls to return per page, ranging between 1 and 100.
      response: GetCallsResponse
      pagination:
        cursor: $request.starting_after
        next_cursor: $response.next_page
        results: $response.data

    get-call:
      path: /calls/{call_id}
      method: GET
      display-name: Get Call
      path-parameters:
        call_id:
          type: string
          docs: |
            The ID of the call.
      response: AgentCall
      examples:
        - name: Get Call
          path-parameters:
            call_id: "ac_abc123"
          response:
            body:
              id: "ac_sid_123"
              agent_id: "agent_123"
              start_time: "2025-08-13T17:43:58.698624Z"
              end_time: "2025-08-13T17:44:19.253128Z"
              transcript:
                [
                  {
                    role: "assistant",
                    text: "Hi there!",
                    text_chunks:
                      [
                        { text: "Hi", start_timestamp: 1.20720063 },
                        { text: "there!", start_timestamp: 1.40457024 },
                      ],
                    start_timestamp: 0,
                    end_timestamp: 1.5892063492063493,
                    end_reason: "interrupted",
                    tts_ttfb: 0.28243207931518555,
                  },
                  {
                    role: "user",
                    text: "-",
                    text_chunks:
                      [{ text: "-", start_timestamp: 1.3892063492063493 }],
                    start_timestamp: 1.3892063492063493,
                    end_timestamp: 3.2721995464852607,
                    vad_buffer_ms: 820,
                  },
                  {
                    role: "assistant",
                    text: "I'm",
                    text_chunks:
                      [{ text: "I'm", start_timestamp: 0.058049886 }],
                    start_timestamp: 4.581201814058957,
                    end_timestamp: 5.235691609977324,
                    end_reason: "interrupted",
                  },
                  {
                    role: "user",
                    text: "Hi, Savannah. Nice to meet you.",
                    text_chunks:
                      [
                        {
                          text: "Hi, Savannah. Nice to meet you.",
                          start_timestamp: 5.035691609977324,
                        },
                      ],
                    start_timestamp: 5.035691609977324,
                    end_timestamp: 7.058956916099773,
                    vad_buffer_ms: 464,
                  },
                  {
                    role: "assistant",
                    text: "It's",
                    text_chunks:
                      [{ text: "It's", start_timestamp: 0.058049886 }],
                    start_timestamp: 8.788707482993198,
                    end_timestamp: 11.359954648526077,
                    end_reason: "call_ended",
                  },
                ]
              telephony_params: { "to": "+11234567890", "from": "+11234567890" }
              summary: "A brief, fragmented greeting exchange occurs where the human says hello to someone named Savannah."
              status: "completed"
              deployment_id: "ad_456"

    download-call-audio:
      path: /calls/{call_id}/audio
      method: GET
      display-name: Download Call Audio
      path-parameters:
        call_id:
          type: string
          docs: |
            The ID of the call.
      response: file
      docs: |
        The downloaded audio file is in .wav format. This endpoint streams the audio file content (WAV format) to the client.

    phone-numbers:
      path: /{agent_id}/phone-numbers
      method: GET
      docs: |
        List the phone numbers associated with an agent. Currently, you can only have one phone number per agent and these are provisioned by Cartesia.
      display-name: List Phone Numbers
      path-parameters:
        agent_id:
          type: string
          docs: |
            The ID of the agent.
      response: list<PhoneNumber>
      examples:
        - name: List Phone Numbers
          path-parameters:
            agent_id: "agent_demo"
          response:
            body:
              - agent_id: "agent_demo"
                number: "+11234567890"
                created_at: "2025-06-06T00:54:01.705Z"
                updated_at: "2025-06-06T01:32:42.879Z"
                is_cartesia_managed: true

    list-metrics:
      path: /metrics
      method: GET
      display-name: List Metrics
      docs: |
        List of all LLM-as-a-Judge metrics owned by your account.
      request:
        name: ListMetricsRequest
        query-parameters:
          starting_after:
            type: optional<string>
            docs: |
              (Pagination option) The ID of the last Metric in the current response as a cursor for the next page of results.
          limit:
            type: optional<integer>
            docs: |
              (Pagination option) The number of metrics to return per page, ranging between 1 and 100. The default page limit is 10.
      response: ListMetricsResponse
      examples:
        - name: List Metrics
          response:
            body:
              data:
                - id: "am_abc123"
                  name: "evaluate-user-satisfaction"
                  display_name: "Evaluate User Satisfaction"
                  prompt: |
                    Task:
                    Evaluate how engaged and satisfied the user is with the conversation. Engagement may be shown through active interest in the agent’s products/services, expressing that the agent was helpful, or indicating they would want to interact again.

                    Decision Logic:
                    - If the user shows strong engagement (asks detailed follow-up questions, expresses high interest, compliments the agent, or states they would use the service/agent again) → classify as HIGH_SATISFACTION
                    - If the user shows some engagement (asks a few relevant questions, shows mild interest, or gives neutral feedback) → classify as MEDIUM_SATISFACTION
                    - If the user shows little or no engagement (short answers, off-topic responses, disinterest, no signs of satisfaction) → classify as LOW_SATISFACTION

                    Notes:
                    - Engagement can be verbal (explicit statements of interest) or behavioral (asking more about features, prices, benefits, or next steps).
                    - Expressions of satisfaction, gratitude, or willingness to call again count as positive engagement.
                    - Ignore scripted greetings or polite closings unless they contain genuine feedback.

                    Return:
                    Only output the exact category name as a string: HIGH_SATISFACTION, MEDIUM_SATISFACTION, or LOW_SATISFACTION.
                  created_at: "2025-08-13T16:24:17.457Z"
              has_more: true
              next_page: "am_def456"

    get-metric:
      path: /metrics/{metric_id}
      method: GET
      display-name: Get Metric
      docs: |
        Get a metric by its ID.
      path-parameters:
        metric_id:
          type: string
          docs: |
            The ID of the metric.
      response: Metric
      examples:
        - name: Get Metric
          path-parameters:
            metric_id: "am_abc123"
          response:
            body:
              id: "am_abc123"
              name: "evaluate-user-satisfaction"
              display_name: "Evaluate User Satisfaction"
              prompt: |
                Task:
                Evaluate how engaged and satisfied the user is with the conversation. Engagement may be shown through active interest in the agent’s products/services, expressing that the agent was helpful, or indicating they would want to interact again.

                Decision Logic:
                - If the user shows strong engagement (asks detailed follow-up questions, expresses high interest, compliments the agent, or states they would use the service/agent again) → classify as HIGH_SATISFACTION
                - If the user shows some engagement (asks a few relevant questions, shows mild interest, or gives neutral feedback) → classify as MEDIUM_SATISFACTION
                - If the user shows little or no engagement (short answers, off-topic responses, disinterest, no signs of satisfaction) → classify as LOW_SATISFACTION

                Notes:
                - Engagement can be verbal (explicit statements of interest) or behavioral (asking more about features, prices, benefits, or next steps).
                - Expressions of satisfaction, gratitude, or willingness to call again count as positive engagement.
                - Ignore scripted greetings or polite closings unless they contain genuine feedback.

                Return:
                Only output the exact category name as a string: HIGH_SATISFACTION, MEDIUM_SATISFACTION, or LOW_SATISFACTION.
              created_at: "2025-08-13T16:24:17.457Z"

    create-metric:
      path: /metrics
      method: POST
      display-name: Create Metric
      docs: |
        Create a new metric.
      request: CreateMetricRequest
      response: Metric
      examples:
        - name: Create Metric
          request:
            name: "evaluate-user-satisfaction"
            display_name: "Evaluate User Satisfaction"
            prompt: |
              Task:
              Evaluate how engaged and satisfied the user is with the conversation. Engagement may be shown through active interest in the agent’s products/services, expressing that the agent was helpful, or indicating they would want to interact again.

              Decision Logic:
              - If the user shows strong engagement (asks detailed follow-up questions, expresses high interest, compliments the agent, or states they would use the service/agent again) → classify as HIGH_SATISFACTION
              - If the user shows some engagement (asks a few relevant questions, shows mild interest, or gives neutral feedback) → classify as MEDIUM_SATISFACTION
              - If the user shows little or no engagement (short answers, off-topic responses, disinterest, no signs of satisfaction) → classify as LOW_SATISFACTION

              Notes:
              - Engagement can be verbal (explicit statements of interest) or behavioral (asking more about features, prices, benefits, or next steps).
              - Expressions of satisfaction, gratitude, or willingness to call again count as positive engagement.
              - Ignore scripted greetings or polite closings unless they contain genuine feedback.

              Return:
              Only output the exact category name as a string: HIGH_SATISFACTION, MEDIUM_SATISFACTION, or LOW_SATISFACTION.
          response:
            body:
              id: "am_abc123"
              name: "evaluate-user-satisfaction"
              display_name: "Evaluate User Satisfaction"
              prompt: |
                Task:
                Evaluate how engaged and satisfied the user is with the conversation. Engagement may be shown through active interest in the agent’s products/services, expressing that the agent was helpful, or indicating they would want to interact again.

                Decision Logic:
                - If the user shows strong engagement (asks detailed follow-up questions, expresses high interest, compliments the agent, or states they would use the service/agent again) → classify as HIGH_SATISFACTION
                - If the user shows some engagement (asks a few relevant questions, shows mild interest, or gives neutral feedback) → classify as MEDIUM_SATISFACTION
                - If the user shows little or no engagement (short answers, off-topic responses, disinterest, no signs of satisfaction) → classify as LOW_SATISFACTION

                Notes:
                - Engagement can be verbal (explicit statements of interest) or behavioral (asking more about features, prices, benefits, or next steps).
                - Expressions of satisfaction, gratitude, or willingness to call again count as positive engagement.
                - Ignore scripted greetings or polite closings unless they contain genuine feedback.

                Return:
                Only output the exact category name as a string: HIGH_SATISFACTION, MEDIUM_SATISFACTION, or LOW_SATISFACTION.
              created_at: "2025-08-13T16:24:17.457Z"

    list-metric-results:
      path: /metrics/results
      method: GET
      display-name: List Metric Results
      docs: |
        Paginated list of metric results. Filter results using the query parameters,
      response: ListMetricResultsResponse
      request:
        name: ListMetricResultsRequest
        query-parameters:
          agent_id:
            type: optional<string>
            docs: |
              The ID of the agent.
          deployment_id:
            type: optional<string>
            docs: |
              The ID of the deployment.
          metric_id:
            type: optional<string>
            docs: |
              The ID of the metric.
          call_id:
            type: optional<string>
            docs: |
              The ID of the call.
          starting_after:
            type: optional<string>
            docs: |
              A cursor to use in pagination. `starting_after` is a metric result ID that defines your place in the list. For example, if you make a /metrics/results request and receive 100 objects, ending with `metric_result_abc123`, your subsequent call can include `starting_after=metric_result_abc123` to fetch the next page of the list.
          ending_before:
            type: optional<string>
            docs: |
              A cursor to use in pagination. `ending_before` is a metric result ID that defines your place in the list. For example, if you make a /metrics/results request and receive 100 objects, starting with `metric_result_abc123`, your subsequent call can include `ending_before=metric_result_abc123` to fetch the previous page of the list.
          limit:
            type: optional<integer>
            default: 10
            docs: |
              The number of metric results to return per page, ranging between 1 and 100.
      pagination:
        cursor: $request.starting_after
        next_cursor: $response.next_page
        results: $response.data
      examples:
        - name: List Metric Results
          response:
            body:
              data:
                - id: "amr_abc123"
                  metricName: "system_call_success"
                  metricId: "am_abc123"
                  agentId: "agent_abc123"
                  summary: "The conversation features a voice agent named Savannah introducing herself to a user, who is interested in learning more about the capabilities of Cartesia's voice agents."
                  deploymentId: "ad_abc123"
                  callId: "ac_abc123"
                  value: true
                  status: "completed"
                  createdAt: "2025-08-13T12:00:00Z"
                  jsonResult:
                    value: true
                    type: "boolean"
                    description: "The call completed successfully without any abrupt hangups due to system errors."
                  result: "{value: true, type: boolean, description: The call completed successfully without any abrupt hangups due to system errors.}"
              has_more: true
              next_page: "amr_def456"

    export-metric-results:
      path: /metrics/results/export
      method: GET
      display-name: Export Metric Results
      docs: |
        Export metric results to a CSV file. This endpoint is paginated with a default of 10 results per page and maximum of 100 results per page. Information on pagination can be found in the headers `x-has-more`, `x-limit`, and `x-next-page`.
      request:
        name: ExportMetricResultsRequest
        query-parameters:
          agent_id:
            type: optional<string>
            docs: |
              The ID of the agent.
          deployment_id:
            type: optional<string>
            docs: |
              The ID of the deployment.
          metric_id:
            type: optional<string>
            docs: |
              The ID of the metric.
          call_id:
            type: optional<string>
            docs: |
              The ID of the call.
          starting_after:
            type: optional<string>
            docs: |
              A cursor to use in pagination. `starting_after` is a metric result ID that defines your place in the list. For example, if you make a /metrics/results request and receive 100 objects, ending with `metric_result_abc123`, your subsequent call can include `starting_after=metric_result_abc123` to fetch the next page of the list.
          ending_before:
            type: optional<string>
            docs: |
              A cursor to use in pagination. `ending_before` is a metric result ID that defines your place in the list. For example, if you make a /metrics/results request and receive 100 objects, starting with `metric_result_abc123`, your subsequent call can include `ending_before=metric_result_abc123` to fetch the previous page of the list.
          limit:
            type: optional<integer>
            default: 10
            docs: |
              The number of metric results to return per page, ranging between 1 and 100.

    add-metric-to-agent:
      path: /{agent_id}/metrics/{metric_id}
      method: POST
      display-name: Add Metric to Agent
      docs: |
        Add a metric to an agent. Once the metric is added, it will be run on all calls made to the agent automatically from that point onwards.
      path-parameters:
        agent_id:
          type: string
          docs: |
            The ID of the agent.
        metric_id:
          type: string
          docs: |
            The ID of the metric.

    remove-metric-from-agent:
      path: /{agent_id}/metrics/{metric_id}
      method: DELETE
      display-name: Remove Metric from Agent
      docs: |
        Remove a metric from an agent. Once the metric is removed, it will no longer be run on all calls made to the agent automatically from that point onwards. Existing metric results will remain.
      path-parameters:
        agent_id:
          type: string
        metric_id:
          type: string
          docs: |
            The ID of the metric.

    list-deployments:
      path: /{agent_id}/deployments
      method: GET
      display-name: List Deployments
      docs: |
        List of all deployments associated with an agent.
      path-parameters:
        agent_id:
          type: string
          docs: |
            The ID of the agent.
      response: list<Deployment>
      examples:
        - name: List Deployments
          path-parameters:
            agent_id: "agent_demo"
          response:
            body:
              - id: "ad_abc123"
                agent_id: "agent_abc123"
                status: "deployed"
                is_live: true
                is_pinned: true
                env_var_collection_id: "env_123"
                source_code_file_id: "scf_456"
                git_repository_id: "git_789"
                git_commit_hash: "commit_hash_abc"
                created_at: "2025-07-25T06:50:12.889Z"
                updated_at: "2025-07-25T07:00:12.889Z"
                build_completed_at: "2025-07-25T07:10:12.889Z"
                build_error: null
                build_logs: "Build logs here"
                build_started_at: "2025-07-25T06:55:12.889Z"
                deployment_started_at: "2025-07-25T07:15:12.889Z"
                deployment_completed_at: "2025-07-25T07:20:12.889Z"
                deployment_error: null

    get-deployment:
      path: /deployments/{deployment_id}
      method: GET
      display-name: Get Deployment
      docs: |
        Get a deployment by its ID.
      path-parameters:
        deployment_id:
          type: string
          docs: |
            The ID of the deployment.
      response: Deployment
      examples:
        - name: Get Deployment
          path-parameters:
            deployment_id: "ad_abc123"
          response:
            body:
              id: "ad_abc123"
              agent_id: "agent_abc123"
              status: "deployed"
              is_live: true
              is_pinned: true
              env_var_collection_id: "env_123"
              source_code_file_id: "scf_456"
              git_repository_id: "git_789"
              git_commit_hash: "commit_hash_abc"
              created_at: "2025-07-25T06:50:12.889Z"
              updated_at: "2025-07-25T07:00:12.889Z"
              build_completed_at: "2025-07-25T07:10:12.889Z"
              build_error: null
              build_logs: "Build logs here"
              build_started_at: "2025-07-25T06:55:12.889Z"
              deployment_started_at: "2025-07-25T07:15:12.889Z"
              deployment_completed_at: "2025-07-25T07:20:12.889Z"
              deployment_error: null
